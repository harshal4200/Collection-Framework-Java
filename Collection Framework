import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.Iterator;

import javax.swing.text.html.HTMLDocument.Iterator;
public class CollectionTutorial{
    public static void main(String[] args) {
   
        //ArrayList
        ArrayList<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(30);
        list.add(40);
        list.add(2,25);
        //list.add("Harshal");
        System.out.println(list);
  
    //LinkedList
    List<Integer> linkedList= new LinkedList<Integer>();
   linkedList.add(2);
   linkedList.add(30);
   linkedList.add(1, 4);
    System.out.println(linkedList);

        //ArrayList is non syncronised thats why it is fast.
        //Vector is syncronised so it is slow.
        //Syncronised means thread safe.

    //Vector
    Vector<String> vector = new Vector<String>();
    vector.add("5");
    vector.add("4");
    System.out.println(vector);
    //vector.clear();
    //System.out.println(vector);
    // it clear all vector.81
        // vector is syncronised and thred safe thats why we used in stack.

    //Stack
    //Last in first out
    Stack<Integer> stack = new Stack<>();
        stack.push(10);
        stack.push(20);
        stack.push(20);
        System.out.println(stack);
        System.out.println(stack.pop());
        System.out.println(stack.peek());

/************************************************************************************* */
        //Set
        //Set is unorderd collection and does not allow duplicate value.
        //It only store unique value.

        //HashSet store unique value and faster exicution
        HashSet<Integer>set = new HashSet<Integer>();
        set.add(30);
        set.add(20);
        set.add(30);
        System.out.println(set);

        //LinkedHashSet unique value and also orderd
        LinkedHashSet<Integer> listset = new LinkedHashSet();
        listset.add(4);
        listset.add(9);
        listset.add(10);
        listset.add(7);
        System.out.println(listset);
        boolean b1=listset.contains(10);
        System.out.println(b1);
        
        //TreeSet unique value and in incrising order
        TreeSet<Integer> treeSet = new TreeSet<Integer>();
        treeSet.add(20);
        treeSet.add(30);
        treeSet.add(10);
        treeSet.add(11);
        System.out.println(treeSet);
/*********************************************************************************** */
        //Queue
        //Queue is interface and we cannot make interface object.
        //First in first out.
        //if we use add method the queue can show throw exception
        Queue<Integer> queue = new LinkedList<Integer>() ;
        queue.add(10);
        queue.add(11);
        queue.offer(40);
        queue.add(30);
        queue.offer(9);
        System.out.println("remove: "+queue.remove());
        System.out.println(queue.peek());
        System.out.println(queue.poll());
        System.out.println(queue);

          //ArrayDeque
          Deque<Integer> arrayDQueue = new ArrayDeque<Integer>();
          arrayDQueue.offer(5);
          arrayDQueue.offer(10);
          arrayDQueue.offerLast(20);
          arrayDQueue.pollLast();
          arrayDQueue.offerFirst(1);
          System.out.println(arrayDQueue);

          //Priority Queue
          //in priority only smallest minimum value on peek 
          //for printing maximum value at top use in paramiter "Comparator.reverseOrder()"
          PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
          pq.offer(15);
          pq.add(5);
          pq.add(2);
          pq.offer(40);
          System.out.println(pq);

          /************************************************************************************* */
          //HashMap
          //In <key,value> key is unique and value can be same.
          HashMap<String,Integer>map=new HashMap<String,Integer>();
          map.put("Second", 3);
          map.put("First", 7);
          System.out.println(map);

          //TreeMap
          //they take value in sorted way
          /*TreeMap<String,Integer>tMap=new TreeMap<String,Integer>();
          tMap.put("Second", 6);
          tMap.put("First", 5);
          System.out.println("tMap:",tMap);
          System.out.println(tMap.get("First"));
          System.out.println(tMap.keySet());
          System.out.println(tMap.values());*/

/************************************************************************ */

          int arr[] ={1,32,4,2,64};
          for(int e:arr)
          System.out.print(e+", ");
          Arrays.sort(arr);
          System.out.println();
          for(int e:arr)
          System.out.print(e+", ");
          System.out.println(Arrays.binarySearch(arr, 64));

          //Sort arraylist
          ArrayList<String> a = new ArrayList<String>();
          a.add("Second");
          a.add("First");
          System.out.println(a);
          Collections.sort(a);
          System.out.println(a);
          Collections.max(a);
          System.out.println(a);
          //Iterator
          Iterator it = a.iterator();
         while (it.hasNext()) {
            System.out.println("List:"+it.next());
         }
      }
}


